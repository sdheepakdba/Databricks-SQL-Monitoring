arkdown
Copy code
# Guide for DBSQL System Tables

### Jeremy Lewallen, Sahib Grover, Alex Pu

**Last updated: Jun 12, 2024**

---

The purpose of this guide is to help you, as a Databricks SQL Admin, better understand your warehouse usage and performance, aiding in efficient cost management, performance tuning, and effective resource allocation.

## How to Use the Guide

This guide contains a series of SQL queries that allow you to extract specific data from the Warehouse Events System Table and the Query History System Table. Each query corresponds to a particular administrative task or question that you may wish to answer.

After each query description, you can create an alert based on the query results using the instructions provided. This can help you proactively manage your warehouses.

### Enabling System Tables

If you havenâ€™t enabled system tables, start here: [Monitor usage with system tables | Databricks on AWS](https://docs.databricks.com/administration-guide/account-settings/system-tables.html).

### Alerts

Alerts are a powerful way to stay informed about changes in your warehouses. With alerts, you can receive notifications when certain conditions are met in your query results.

#### Steps to Create an Alert

1. **Find the target query** that you want to alert on.
2. **Configure the alert** in the Trigger condition field.
3. **Adjust alert settings** and preview the alert to test whether it would trigger with the current data.
4. **Select notification preferences** for when your alert is triggered.
5. **Choose a template** for the alert notification.
6. **Save changes** and set a refresh schedule for the alert.
7. **Click Create Alert** and choose a notification destination. Remember, if you skip this step, you will not be notified when the alert is triggered.

For detailed step-by-step instructions, please refer to the [linked alert guide](https://docs.databricks.com/sql/admin/alerts.html).

## Query Descriptions and Alerting Opportunities

### Query 1: Resource Monitoring - Warehouses that are actively running and for how long

This query helps you understand which warehouses are currently active and their running time in hours.

```sql
USE CATALOG `system`;

SELECT
    we.warehouse_id,
    we.event_time,
    TIMESTAMPDIFF(MINUTE, we.event_time, CURRENT_TIMESTAMP()) / 60.0 AS running_hours,
    we.cluster_count
FROM
    compute.warehouse_events we
WHERE
    we.event_type = 'RUNNING'
    AND NOT EXISTS (
        SELECT
            1
        FROM
            compute.warehouse_events we2
        WHERE
            we2.warehouse_id = we.warehouse_id
            AND we2.event_time > we.event_time
    )
Alerting Opportunity: Set an alert if a warehouse is running longer than expected. Trigger an alert when the running hours exceed a certain threshold.

Query 2: Resource Monitoring - Warehouses that are upscaled longer than expected
This query identifies warehouses that have scaled up (increased in cluster count) and have remained in that state longer than usual.

sql
Copy code
USE CATALOG `system`;

SELECT
   we.warehouse_id,
   we.event_time,
   TIMESTAMPDIFF(MINUTE, we.event_time, CURRENT_TIMESTAMP()) / 60.0 AS upscaled_hours,
   we.cluster_count
FROM
   compute.warehouse_events we
WHERE
   we.event_type = 'SCALED_UP'
   AND we.cluster_count >= 2
   AND NOT EXISTS (
       SELECT 1
       FROM compute.warehouse_events we2
       WHERE we2.warehouse_id = we.warehouse_id
       AND (
           (we2.event_type = 'SCALED_DOWN') OR 
           (we2.event_type = 'SCALED_UP' AND we2.cluster_count < 2)
       )
       AND we2.event_time > we.event_time
   )
Alerting Opportunity: Alert when upscaled hours exceed a set limit to monitor resources and costs.

Query 3: Warehouses that start and have never started before
This query informs you about new warehouses that are starting for the first time.

sql
Copy code
USE CATALOG `system`;

SELECT
   we.warehouse_id,
   we.event_time,
   we.cluster_count
FROM
   compute.warehouse_events we
WHERE
   (we.event_type = 'STARTING' OR we.event_type = 'RUNNING')
   AND NOT EXISTS (
       SELECT 1
       FROM compute.warehouse_events we2
       WHERE we2.warehouse_id = we.warehouse_id
       AND we2.event_time < we.event_time
   )
Alerting Opportunity: Set an alert for new warehouses to track resource allocation.

Query 4: What caused billing charges for the month?
This query provides a detailed receipt of your monthly charges, including scaling up/down and start/stop events.

sql
Copy code
USE CATALOG `system`;

SELECT
    we.warehouse_id AS warehouse_id,
    we.event_type AS event,
    we.event_time AS event_time,
    we.cluster_count AS cluster_count
FROM
    compute.warehouse_events AS we
WHERE
    we.event_type IN (
        'STARTING', 'RUNNING', 'STOPPING', 'STOPPED',
        'SCALING_UP', 'SCALED_UP', 'SCALING_DOWN', 'SCALED_DOWN'
    )
    AND MONTH(we.event_time) = 7
    AND YEAR(we.event_time) = YEAR(CURRENT_DATE())
    AND we.warehouse_id = '19c9d68652189278'
ORDER BY
    event_time DESC
Query 5: Which warehouses haven't been used in the last 30 days
This query helps you identify unused resources, providing an opportunity for cost optimization.

sql
Copy code
USE CATALOG `system`;

SELECT 
    we.warehouse_id,
    we.event_time,
    we.event_type,
    we.cluster_count
FROM 
    compute.warehouse_events AS we
WHERE 
    we.warehouse_id IN (
        SELECT DISTINCT 
            warehouse_id
        FROM 
            compute.warehouse_events
        WHERE
            MONTH(event_time) = 6
            AND YEAR(event_time) = YEAR(CURRENT_DATE())
    )
    AND we.warehouse_id NOT IN (
        SELECT DISTINCT 
            warehouse_id
        FROM 
            compute.warehouse_events
        WHERE
            MONTH(event_time) = 7
            AND YEAR(event_time) = YEAR(CURRENT_DATE())
    )
ORDER BY
    event_time DESC
Alerting Opportunity: Set an alert when the query detects unused warehouses to optimize costs.

Query 6: Warehouses with the most uptime in July
This query shows which warehouses have been used the most during a specific month.

sql
Copy code
USE system.compute;

WITH StartEvents AS (
    SELECT
        warehouse_id,
        event_time AS start_time
    FROM compute.warehouse_events
    WHERE event_type = 'STARTING'
),
StopEvents AS (
    SELECT
        warehouse_id,
        event_time AS stop_time
    FROM compute.warehouse_events
    WHERE event_type = 'STOPPED'
),
JoinedEvents AS (
    SELECT
        s.warehouse_id,
        s.start_time,
        MIN(e.stop_time) AS first_stop_after_start
    FROM StartEvents s
    JOIN StopEvents e ON s.warehouse_id = e.warehouse_id AND e.stop_time > s.start_time
    GROUP BY s.warehouse_id, s.start_time
)
SELECT
    DATE(JoinedEvents.start_time) AS date,
    JoinedEvents.warehouse_id,
    SUM(TIMESTAMPDIFF(MINUTE, JoinedEvents.start_time, JoinedEvents.first_stop_after_start)) / 60.0 AS uptime_hours
FROM JoinedEvents
GROUP BY DATE(JoinedEvents.start_time), JoinedEvents.warehouse_id
ORDER BY date, uptime_hours DESC;
Alerting Opportunity: Track high-utilization warehouses and set an alert when uptime hours exceed a specific threshold.

Query 7: Warehouses that spent the most time upscaled in July
This query informs you about warehouses that have spent significant time in the upscaled state.

sql
Copy code
USE CATALOG `system`;

SELECT
   warehouse_id,
   SUM(TIMESTAMPDIFF(MINUTE, upscaled_time, downscaled_time)) / 60.0 AS upscaled_hours
FROM (
   SELECT
      upscaled.warehouse_id,
      upscaled.event_time AS upscaled_time,
      (
         SELECT 
            MIN(downscaled.event_time)
         FROM 
            compute.warehouse_events AS downscaled
         WHERE
            downscaled.warehouse_id = upscaled.warehouse_id
            AND (downscaled.event_type = 'SCALED_DOWN' OR downscaled.event_type = 'STOPPED')
            AND downscaled.event_time > upscaled.event_time
      ) AS downscaled_time
   FROM
      compute.warehouse_events AS upscaled
   WHERE
      upscaled.event_type = 'SCALED_UP'
      AND upscaled.cluster_count >= 2
      AND MONTH(upscaled.event_time) = 7
      AND YEAR(upscaled.event_time) = YEAR(CURRENT_DATE())
) AS warehouse_upscaled
WHERE
   downscaled_time IS NOT NULL
GROUP BY
   warehouse_id
ORDER BY
   upscaled_hours DESC;
Alerting Opportunity: Manage performance and cost by setting an alert when upscaled hours exceed a certain limit.

Query 8: Uptime by date and warehouse ID
This query informs you about the total minutes that warehouses were up by date. It can be used as a base for forecasting.

sql
Copy code
USE system.compute;

WITH StartEvents AS (
    SELECT
        warehouse_id,
        event_time AS start_time
    FROM compute.warehouse_events
    WHERE event_type = 'STARTING'







Continue generating



ChatGPT can make m
